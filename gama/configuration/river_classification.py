import river

clf_config_online = {
    river.ensemble.adaptive_random_forest.AdaptiveRandomForestClassifier: {'disable_weighted_vote': False,
                                                                           'drift_detector': (
                                                                           river.drift.adwin.ADWIN, {'delta': 0.001}),
                                                                           'grace_period': 50,
                                                                           'lambda_value': 6,
                                                                           'leaf_prediction': 'nba',
                                                                           'max_depth': None,
                                                                           'max_features': 'sqrt',
                                                                           'max_size': 32,
                                                                           'memory_estimate_period': 2000000,
                                                                           'metric': (river.metrics.accuracy.Accuracy,
                                                                                      {'cm': None}),
                                                                           'n_models': 10,
                                                                           'nb_threshold': 0,
                                                                           'nominal_attributes': None,
                                                                           'seed': None,
                                                                           'split_confidence': 0.01,
                                                                           'split_criterion': 'info_gain',
                                                                           'splitter': None,
                                                                           'tie_threshold': 0.05,
                                                                           'warning_detector': (
                                                                           river.drift.adwin.ADWIN, {'delta': 0.01})},
    river.linear_model.alma.ALMAClassifier: {'B': 1.1111111111111112,
                                             'C': 1.4142135623730951,
                                             'alpha': 0.9,
                                             'p': 2},
    river.linear_model.glm.LogisticRegression: {'clip_gradient': 1000000000000.0,
                                                'initializer': (river.optim.initializers.Zeros, {}),
                                                'intercept_init': 0.0,
                                                'intercept_lr': (
                                                river.optim.schedulers.Constant, {'learning_rate': 0.01}),
                                                'l2': 0.0,
                                                'loss': (
                                                river.optim.losses.Log, {'weight_neg': 1.0, 'weight_pos': 1.0}),
                                                'optimizer': (river.optim.sgd.SGD,
                                                              {'lr': (river.optim.schedulers.Constant,
                                                                      {'learning_rate': 0.01})})},
    river.linear_model.pa.PAClassifier: {'C': 1.0,
                                         'learn_intercept': True,
                                         'mode': 1},
    river.linear_model.softmax.SoftmaxRegression: {'l2': 0,
                                                   'loss': (river.optim.losses.CrossEntropy, {'class_weight': {}}),
                                                   'optimizer': (river.optim.sgd.SGD,
                                                                 {'lr': (river.optim.schedulers.Constant,
                                                                         {'learning_rate': 0.01})})},
    river.preprocessing.feature_hasher.FeatureHasher: {'n_features': 1048576,
                                                       'seed': None},
    river.preprocessing.impute.PreviousImputer: {},
    river.preprocessing.lda.LDA: {'alpha_beta': 100.0,
                                  'alpha_theta': 0.5,
                                  'burn_in_sweeps': 5,
                                  'kappa': 0.75,
                                  'maximum_size_vocabulary': 4000,
                                  'n_components': 10,
                                  'number_of_documents': 1000000.0,
                                  'number_of_samples': 10,
                                  'ranking_smooth_factor': 1e-12,
                                  'seed': None,
                                  'tau': 64.0,
                                  'vocab_prune_interval': 10},
    river.preprocessing.one_hot.OneHotEncoder: {'sparse': False},
    river.preprocessing.scale.AdaptiveStandardScaler: {'alpha': 0.3},
    river.preprocessing.scale.Binarizer: {'dtype': bool, 'threshold': 0.0},
    river.preprocessing.scale.MaxAbsScaler: {},
    river.preprocessing.scale.MinMaxScaler: {},
    river.preprocessing.scale.Normalizer: {'order': 2},
    river.preprocessing.scale.RobustScaler: {'q_inf': 0.25,
                                             'q_sup': 0.75,
                                             'with_centering': True,
                                             'with_scaling': True},
    river.preprocessing.scale.StandardScaler: {},
    river.tree.extremely_fast_decision_tree.ExtremelyFastDecisionTreeClassifier: {'grace_period': 200,
                                                                                  'leaf_prediction': 'nba',
                                                                                  'max_depth': None,
                                                                                  'min_samples_reevaluate': 20,
                                                                                  'nb_threshold': 0,
                                                                                  'nominal_attributes': None,
                                                                                  'split_confidence': 1e-07,
                                                                                  'split_criterion': 'info_gain',
                                                                                  'splitter': (
                                                                                  river.tree.splitter.gaussian_splitter.GaussianSplitter,
                                                                                  {'n_splits': 10}),
                                                                                  'tie_threshold': 0.05},
    river.tree.hoeffding_adaptive_tree_classifier.HoeffdingAdaptiveTreeClassifier: {'adwin_confidence': 0.002,
                                                                                    'bootstrap_sampling': True,
                                                                                    'drift_window_threshold': 300,
                                                                                    'grace_period': 200,
                                                                                    'leaf_prediction': 'nba',
                                                                                    'max_depth': None,
                                                                                    'nb_threshold': 0,
                                                                                    'nominal_attributes': None,
                                                                                    'seed': None,
                                                                                    'split_confidence': 1e-07,
                                                                                    'split_criterion': 'info_gain',
                                                                                    'splitter': (
                                                                                    river.tree.splitter.gaussian_splitter.GaussianSplitter,
                                                                                    {'n_splits': 10}),
                                                                                    'tie_threshold': 0.05},
    river.tree.hoeffding_tree_classifier.HoeffdingTreeClassifier: {'grace_period': 200,
                                                                   'leaf_prediction': 'nba',
                                                                   'max_depth': None,
                                                                   'nb_threshold': 0,
                                                                   'nominal_attributes': None,
                                                                   'split_confidence': 1e-07,
                                                                   'split_criterion': 'info_gain',
                                                                   'splitter': (
                                                                   river.tree.splitter.gaussian_splitter.GaussianSplitter,
                                                                   {'n_splits': 10}),
                                                                   'tie_threshold': 0.05}}
